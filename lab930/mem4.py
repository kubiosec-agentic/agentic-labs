from __future__ import annotations
import os
import asyncio
import warnings
from dataclasses import dataclass

# Suppress deprecation warning from agents library
warnings.filterwarnings("ignore", category=DeprecationWarning, message="There is no current event loop")

from mem0 import Memory
from agents import (
    Agent,
    Runner,
    function_tool,
    RunContextWrapper,
    ItemHelpers,
    MessageOutputItem,
    ToolCallItem,
    ToolCallOutputItem,
)

# --- Simple context that carries a user_id for scoping memories
@dataclass
class Mem0Context:
    user_id: str = "demo-user"

# --- Mem0 client (self-hosted config with Qdrant)
config = {
    "vector_store": {
        "provider": "qdrant",
        "config": {
            # either host/port:
            "host": "localhost",
            "port": 6333,
            # or a single URL instead of host/port:
            # "url": "http://localhost:6333",

            "collection_name": "mem0",
            # if you set an API key in Docker env:
            # "api_key": "super-secret",
        }
    },
    "llm": {
        "provider": "openai_structured",
        "config": {"model": "gpt-4o-2024-08-06", "temperature": 0.0}
    }
}

MEM0 = Memory.from_config(config)

# --- Tools the agent can call
@function_tool
def add_to_memory(ctx: RunContextWrapper[Mem0Context], content: str) -> str:
    """Store a fact in Mem0."""
    uid = ctx.context.user_id
    messages = [{"role": "user", "content": content}]
    resp = MEM0.add(messages, user_id=uid)
    return f"Saved {len(resp) if isinstance(resp, list) else 1} item(s)."

@function_tool
def search_memory(ctx: RunContextWrapper[Mem0Context], query: str) -> str:
    """Search facts in Mem0 relevant to the query."""
    uid = ctx.context.user_id
    res = MEM0.search(query, user_id=uid)
    items = res if isinstance(res, list) else res.get("results", [])
    memories = [it.get("memory", str(it)) for it in items]
    return "\n".join(memories) if memories else "(no matches)"

@function_tool
def get_all_memory(ctx: RunContextWrapper[Mem0Context]) -> str:
    """Return all stored facts for this user."""
    uid = ctx.context.user_id
    res = MEM0.get_all(user_id=uid)
    items = res if isinstance(res, list) else res.get("results", [])
    memories = [it.get("memory", str(it)) for it in items]
    return "\n".join(memories) if memories else "(empty)"

# --- The agent
memory_agent = Agent[Mem0Context](
    name="Memory Assistant",
    instructions=(
        "You can store facts with add_to_memory, search them with search_memory, "
        "and list everything with get_all_memory. When the user says 'remember' or shares a profile fact, "
        "call add_to_memory with that fact. When they ask about past facts, call search_memory. "
        "If they ask what you know, call get_all_memory. After tools, answer concisely."
    ),
    tools=[add_to_memory, search_memory, get_all_memory],
)

if __name__ == "__main__":
    async def main():
        # Simple usage
        ctx = Mem0Context(user_id="demo-user")
        
        # Run the agent with your prompt
        result = await Runner.run(memory_agent, "search my name and write a song about it", context=ctx)
        print(result.final_output)
    
    # Generated by Copilot
    asyncio.run(main())


