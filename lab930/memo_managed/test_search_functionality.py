#!/usr/bin/env python3
"""
Test the search functionality of the updated mem2_saas.py
Generated by Copilot
"""

import asyncio
from mem2_saas import memory_agent, Mem0Context
from agents import Runner, ItemHelpers, MessageOutputItem, ToolCallItem, ToolCallOutputItem

async def test_search():
    ctx = Mem0Context(user_id="search-test-user")
    
    # First add some memories
    print("=== Adding memories ===")
    result1 = await Runner.run(memory_agent, "Remember: I love pizza and Italian food", context=ctx)
    for item in result1.new_items:
        if isinstance(item, MessageOutputItem):
            print("Assistant:", ItemHelpers.text_message_output(item))
        elif isinstance(item, ToolCallOutputItem):
            print("Tool result:", item.output)
    
    result2 = await Runner.run(memory_agent, "Also remember: I work as a software engineer", context=ctx)
    for item in result2.new_items:
        if isinstance(item, MessageOutputItem):
            print("Assistant:", ItemHelpers.text_message_output(item))
        elif isinstance(item, ToolCallOutputItem):
            print("Tool result:", item.output)
    
    # Now test search
    print("\n=== Testing search ===")
    result3 = await Runner.run(memory_agent, "What do you know about my food preferences?", context=ctx)
    for item in result3.new_items:
        if isinstance(item, MessageOutputItem):
            print("Assistant:", ItemHelpers.text_message_output(item))
        elif isinstance(item, ToolCallItem):
            print("Tool called:", item.raw_item.name if hasattr(item.raw_item, 'name') else 'unknown')
        elif isinstance(item, ToolCallOutputItem):
            print("Tool result:", item.output)
    
    # Test get all
    print("\n=== Testing get all ===")
    result4 = await Runner.run(memory_agent, "What do you know about me?", context=ctx)
    for item in result4.new_items:
        if isinstance(item, MessageOutputItem):
            print("Assistant:", ItemHelpers.text_message_output(item))
        elif isinstance(item, ToolCallItem):
            print("Tool called:", item.raw_item.name if hasattr(item.raw_item, 'name') else 'unknown')
        elif isinstance(item, ToolCallOutputItem):
            print("Tool result:", item.output)

if __name__ == "__main__":
    asyncio.run(test_search())
