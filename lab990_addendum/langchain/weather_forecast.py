from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, ToolMessage
from langchain_core.tools import tool
from pydantic import BaseModel
import openmeteo_requests
import pandas as pd
import requests_cache
from retry_requests import retry
from geopy.geocoders import Nominatim
import json

# Generated by Copilot

# Define a tool with structured input
class WeatherInput(BaseModel):
    location: str

@tool("get_weather", args_schema=WeatherInput)
def get_weather(location: str) -> str:
    """Get current weather and forecast at a location using Open-Meteo API."""
    try:
        # Geocode the location to get coordinates
        geolocator = Nominatim(user_agent="weather_app")
        geo_location = geolocator.geocode(location)
        
        if not geo_location:
            return f"Could not find coordinates for {location}. Please try a more specific location."
        
        latitude = geo_location.latitude
        longitude = geo_location.longitude
        
        # Setup the Open-Meteo API client with cache and retry on error
        cache_session = requests_cache.CachedSession('.cache', expire_after=3600)
        retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
        openmeteo = openmeteo_requests.Client(session=retry_session)

        # Make API request for current weather and forecast
        url = "https://api.open-meteo.com/v1/forecast"
        params = {
            "latitude": latitude,
            "longitude": longitude,
            "current": ["temperature_2m", "relative_humidity_2m", "weather_code", "wind_speed_10m"],
            "hourly": ["temperature_2m", "weather_code"],
            "forecast_days": 1
        }
        responses = openmeteo.weather_api(url, params=params)

        # Process the response
        response = responses[0]
        
        # Get current weather
        current = response.Current()
        current_temp = current.Variables(0).Value()
        current_humidity = current.Variables(1).Value()
        current_weather_code = current.Variables(2).Value()
        current_wind_speed = current.Variables(3).Value()
        
        # Get hourly forecast for today
        hourly = response.Hourly()
        hourly_temperature = hourly.Variables(0).ValuesAsNumpy()
        hourly_weather_codes = hourly.Variables(1).ValuesAsNumpy()
        
        # Create hourly dataframe
        hourly_data = {
            "time": pd.date_range(
                start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
                end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
                freq=pd.Timedelta(seconds=hourly.Interval()),
                inclusive="left"
            ),
            "temperature_2m": hourly_temperature,
            "weather_code": hourly_weather_codes
        }
        hourly_df = pd.DataFrame(data=hourly_data)
        
        # Weather code interpretation (basic mapping)
        weather_descriptions = {
            0: "Clear sky", 1: "Mainly clear", 2: "Partly cloudy", 3: "Overcast",
            45: "Fog", 48: "Depositing rime fog", 51: "Light drizzle", 53: "Moderate drizzle",
            55: "Dense drizzle", 56: "Light freezing drizzle", 57: "Dense freezing drizzle",
            61: "Slight rain", 63: "Moderate rain", 65: "Heavy rain", 66: "Light freezing rain",
            67: "Heavy freezing rain", 71: "Slight snow fall", 73: "Moderate snow fall",
            75: "Heavy snow fall", 77: "Snow grains", 80: "Slight rain showers",
            81: "Moderate rain showers", 82: "Violent rain showers", 85: "Slight snow showers",
            86: "Heavy snow showers", 95: "Thunderstorm", 96: "Thunderstorm with slight hail",
            99: "Thunderstorm with heavy hail"
        }
        
        current_weather_desc = weather_descriptions.get(int(current_weather_code), "Unknown")
        
        # Format the response
        weather_report = f"""Weather for {location} ({latitude:.2f}°N, {longitude:.2f}°E):

Current Conditions:
- Temperature: {current_temp:.1f}°C
- Conditions: {current_weather_desc}
- Humidity: {current_humidity:.0f}%
- Wind Speed: {current_wind_speed:.1f} km/h

Today's Forecast:
- Min Temperature: {hourly_temperature.min():.1f}°C
- Max Temperature: {hourly_temperature.max():.1f}°C
- Morning (6-12): {hourly_temperature[6:12].mean():.1f}°C avg
- Afternoon (12-18): {hourly_temperature[12:18].mean():.1f}°C avg
- Evening (18-24): {hourly_temperature[18:24].mean():.1f}°C avg

Data provided by Open-Meteo API"""
        
        return weather_report
        
    except Exception as e:
        return f"Error fetching weather data for {location}: {str(e)}"

# Initialize LLM
llm = ChatOpenAI(model="gpt-4o")

# Bind tools
llm_with_tools = llm.bind_tools([get_weather])

# User query - try different locations like "Brussels, Belgium" or "New York, USA"
query = "What is the weather in Paris, France?"

# Step 1: Let the LLM decide whether to call a tool
tool_call_response = llm_with_tools.invoke(query)
print("\nTool call response:")
print(tool_call_response)

# Step 2: Simulate tool execution
tool_call = tool_call_response.tool_calls[0]
tool_args = tool_call["args"]
tool_result = get_weather.invoke(tool_args)

print(f"\nTool executed: {tool_result}")

# Step 3: Feed back tool result
messages = [
    HumanMessage(content=query),
    tool_call_response,
    ToolMessage(content=tool_result, tool_call_id=tool_call["id"])
]

# Step 4: Final answer from model
final_response = llm_with_tools.invoke(messages)
print(f"\nFinal response: {final_response.content}")
