#!/usr/bin/env python3
"""
LangGraph Job Application Review Demo
A simple demonstration of using LangGraph to:
- Analyze job descriptions
- Generate personalized application letters
- Review and score applications

Generated by Copilot
"""

import os
from typing import TypedDict, Literal, Annotated, Optional
from operator import add
from langchain_core.runnables.config import RunnableConfig
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, SystemMessage
from langgraph.graph import StateGraph, START, END


def set_environment():
    """Set up environment variables"""
    # Set your OpenAI API key here or in environment
    # os.environ["OPENAI_API_KEY"] = "your-openai-api-key"
    pass


# Job Application Review State
class JobApplicationState(TypedDict):
    job_description: str
    candidate_name: str
    candidate_experience: str
    is_suitable: bool
    application_letter: str
    review_score: int
    review_comments: str
    actions_taken: Annotated[list[str], add]


def analyze_job_requirements(state):
    """Analyze job description to determine suitability"""
    print(f"üìã Analyzing job requirements for {state['candidate_name']}...")
    
    try:
        llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.3)
        
        messages = [
            SystemMessage(content="You are an HR expert analyzing job fit."),
            HumanMessage(content=f"""
            Job Description: {state['job_description']}
            
            Candidate Experience: {state['candidate_experience']}
            
            Based on the job requirements and candidate experience, 
            is this candidate suitable? Answer with 'YES' or 'NO' and briefly explain why.
            """)
        ]
        
        response = llm.invoke(messages)
        is_suitable = "YES" in response.content.upper()
        
        print(f"‚úÖ Analysis complete: {'Suitable' if is_suitable else 'Not suitable'}")
        
        return {
            "is_suitable": is_suitable,
            "actions_taken": ["Job requirements analyzed"]
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è Using fallback analysis: {e}")
        # Fallback: simple keyword matching
        job_lower = state['job_description'].lower()
        exp_lower = state['candidate_experience'].lower()
        
        # Simple matching logic
        common_words = set(job_lower.split()) & set(exp_lower.split())
        is_suitable = len(common_words) >= 3
        
        return {
            "is_suitable": is_suitable,
            "actions_taken": ["Job requirements analyzed (fallback)"]
        }


def generate_application_letter(state):
    """Generate personalized application letter"""
    print(f"‚úçÔ∏è Generating application letter for {state['candidate_name']}...")
    
    try:
        llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.7)
        
        messages = [
            SystemMessage(content="You are a professional career consultant writing application letters."),
            HumanMessage(content=f"""
            Write a professional application letter for:
            
            Candidate: {state['candidate_name']}
            Experience: {state['candidate_experience']}
            Job Description: {state['job_description']}
            
            Make it concise (2-3 paragraphs), professional, and highlight relevant experience.
            """)
        ]
        
        response = llm.invoke(messages)
        
        print("‚úÖ Application letter generated successfully")
        
        return {
            "application_letter": response.content,
            "actions_taken": ["Application letter generated"]
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è Using template letter: {e}")
        # Fallback template
        template_letter = f"""
Dear Hiring Manager,

I am writing to express my interest in the position described in your job posting. 
As {state['candidate_name']}, I believe my background in {state['candidate_experience']} 
makes me a strong candidate for this role.

My experience has prepared me well for the challenges of this position, and I am 
excited about the opportunity to contribute to your team.

Thank you for considering my application.

Sincerely,
{state['candidate_name']}
        """.strip()
        
        return {
            "application_letter": template_letter,
            "actions_taken": ["Template application letter generated"]
        }


def review_application(state):
    """Review and score the application"""
    print(f"üîç Reviewing application for {state['candidate_name']}...")
    
    try:
        llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.2)
        
        messages = [
            SystemMessage(content="You are an HR manager reviewing job applications."),
            HumanMessage(content=f"""
            Review this application and provide:
            1. A score from 1-10 (10 being excellent)
            2. Brief constructive feedback
            
            Job Description: {state['job_description']}
            Application Letter: {state['application_letter']}
            
            Format your response as:
            SCORE: X
            COMMENTS: Your feedback here
            """)
        ]
        
        response = llm.invoke(messages)
        
        # Parse response
        lines = response.content.split('\n')
        score = 7  # default
        comments = "Good application overall."
        
        for line in lines:
            if line.startswith('SCORE:'):
                try:
                    score = int(line.split(':')[1].strip())
                except:
                    pass
            elif line.startswith('COMMENTS:'):
                comments = line.split(':', 1)[1].strip()
        
        print(f"‚úÖ Review complete - Score: {score}/10")
        
        return {
            "review_score": score,
            "review_comments": comments,
            "actions_taken": ["Application reviewed and scored"]
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è Using basic review: {e}")
        # Simple fallback scoring
        letter_length = len(state['application_letter'])
        score = min(10, max(1, letter_length // 50))  # Rough scoring based on length
        
        return {
            "review_score": score,
            "review_comments": "Application reviewed using basic criteria.",
            "actions_taken": ["Basic application review completed"]
        }


def should_generate_application(state: JobApplicationState) -> Literal["generate_application", "reject_application"]:
    """Route based on job suitability"""
    if state.get("is_suitable"):
        return "generate_application"
    return "reject_application"


def reject_application(state):
    """Handle rejection case"""
    print(f"‚ùå Application rejected for {state['candidate_name']}")
    return {
        "application_letter": "Thank you for your interest. Unfortunately, your background doesn't match our current requirements.",
        "review_score": 0,
        "review_comments": "Candidate experience doesn't align with job requirements.",
        "actions_taken": ["Application rejected due to poor fit"]
    }


def create_job_application_graph():
    """Create the job application review workflow"""
    # Generated by Copilot
    builder = StateGraph(JobApplicationState)
    
    # Add nodes
    builder.add_node("analyze_job", analyze_job_requirements)
    builder.add_node("generate_application", generate_application_letter)
    builder.add_node("review_application", review_application)
    builder.add_node("reject_application", reject_application)
    
    # Add edges
    builder.add_edge(START, "analyze_job")
    builder.add_conditional_edges("analyze_job", should_generate_application)
    builder.add_edge("generate_application", "review_application")
    builder.add_edge("review_application", END)
    builder.add_edge("reject_application", END)
    
    return builder.compile()


def demo_job_application_review():
    """Demonstrate the job application review process"""
    print("üöÄ Job Application Review Demo")
    print("=" * 50)
    
    # Sample job and candidates
    job_description = """
    Software Engineer Position
    We're looking for a mid-level software engineer with experience in Python, 
    web development, and API design. The ideal candidate should have 3+ years 
    of experience with frameworks like FastAPI or Django, and familiarity with 
    cloud platforms like AWS or Google Cloud.
    """
    
    candidates = [
        {
            "candidate_name": "Alice Johnson",
            "candidate_experience": "5 years Python development, Django expert, AWS certified, built multiple REST APIs"
        },
        {
            "candidate_name": "Bob Smith", 
            "candidate_experience": "2 years Java development, Spring Boot, some Python scripting experience"
        },
        {
            "candidate_name": "Carol Chen",
            "candidate_experience": "4 years Python, FastAPI, Google Cloud, microservices architecture, API design"
        }
    ]
    
    graph = create_job_application_graph()
    
    for candidate in candidates:
        print(f"\nüìù Processing application for {candidate['candidate_name']}")
        print("-" * 40)
        
        # Prepare state
        initial_state = {
            "job_description": job_description,
            "candidate_name": candidate["candidate_name"],
            "candidate_experience": candidate["candidate_experience"],
            "actions_taken": []
        }
        
        # Run the workflow
        result = graph.invoke(initial_state)
        
        # Display results
        print(f"\nüìä Results for {result['candidate_name']}:")
        print(f"Suitable: {'‚úÖ Yes' if result['is_suitable'] else '‚ùå No'}")
        print(f"Score: {result['review_score']}/10")
        print(f"Comments: {result['review_comments']}")
        print(f"Actions: {', '.join(result['actions_taken'])}")
        
        if result['is_suitable']:
            print(f"\nüìÑ Application Letter:")
            print(result['application_letter'][:200] + "..." if len(result['application_letter']) > 200 else result['application_letter'])


def save_graph_visualization(graph, filename="job_review_workflow.png"):
    """Save graph visualization"""
    try:
        mermaid_png = graph.get_graph().draw_mermaid_png()
        with open(filename, "wb") as f:
            f.write(mermaid_png)
        print(f"üìä Workflow diagram saved to {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è Could not save visualization: {e}")


def main():
    """Main execution"""
    # Generated by Copilot
    set_environment()
    
    # Run the demo
    demo_job_application_review()
    
    # Save visualization
    print(f"\n{'='*50}")
    graph = create_job_application_graph()
    save_graph_visualization(graph)
    
    print(f"\nüéØ Demo Complete!")
    print("This demo showed:")
    print("‚Ä¢ Job requirement analysis")
    print("‚Ä¢ Automated application letter generation") 
    print("‚Ä¢ Application scoring and review")
    print("‚Ä¢ Conditional workflow routing")
    print("‚Ä¢ State management with action tracking")


if __name__ == "__main__":
    main()